import socket
import time
import argparse
import ipaddress
from functools import wraps

def check_password(function):
	@wraps(function)
	def password_checker(password):
		pass

class Colors:

	@staticmethod
	def red_color(color):
		return "\033[1;31;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color


class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Program to test your bruteforce program")
		self.args.add_argument("--ip", help="Ip to connect on", type=self.check_ip, required=True)
		self.args.add_argument("--port", help="Port to connect to", type=self.check_port, required=True)
		self.args.add_argument("--level", help="Up to 5 different levels. 1 being the easiest.", required=True)

		self.args_parsed = self.args.parse_args()


	def get_ip(self):
		return self.args_parsed.ip

	def get_port(self):
		return self.args_parsed.port

	def get_level(self):
		return self.args_parsed.level

	def check_level(self, level):
		level = int(level)

		if level > 5 or level < 1:
			print("[-] Invalid level. Try again.")
			exit()
		return level

	def check_port(self, port):
		port = int(port)

		if port > 65535 or port < 1023:
			print(f"You cannot choose {str(port)} as a port.")
			exit()
		return port

	def check_ip(self, ip):
		if not ipaddress.ip_address(ip):
			print(f"Invalid ip address --> {str(ip)}")
			exit()
		return ip


class BruteForce(Parser):
	def __init__(self):
		super().__init__()
		self.level = self.get_level()

	def level_one(self, password):
		level_one_password = "more"
		for letters in eval(password):
			if letters == level_one_password:
				valid = f"[+] Correct password --> {level_one_password}"
				return valid.encode()
		invalid = f"[-] All passwords were wrong."
		return invalid.encode()

class Socket(BruteForce):
	def __init__(self):
		super().__init__()
		self.ip = self.get_ip()
		self.port = self.get_port()
		self.socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.socket_connection.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		self.socket_connection.bind((self.ip, self.port))
		print(Colors.bright_blue("\n[+] Waiting for a connection"))

		self.socket_connection.listen(0)
		self.connection, self.address = self.socket_connection.accept()

		self.start_connection()

	def start_connection(self):
		print(f"\n[+] Got connection from {str(self.address[0])}")
		
		data_recieved = self.connection.recv(1024)
		check_password = BruteForce.level_one(self, data_recieved)
		self.connection.send(check_password)

			


if __name__ == '__main__':
	try:
		Socket()
	except KeyboardInterrupt:
		print("\n[-] Exiting")
		exit()
